digraph G { 
	rankdir=BT;
	margin=0;
	node [margin="0.03,0.03",fontname="DejaVu Sans"];
	ranksep=0.3;
	nodesep=0.2;
//graph[label="name:Collections,concept number:13,object number:12,attribute number:103"
0 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_12</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>int size()<br/>interface java.util.Collection entries()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection values()<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/></td></tr><tr><td>com.google.common.collect.ArrayListMultimap<br/>com.google.common.collect.ForwardingListMultimap<br/>com.google.common.collect.ForwardingMultimap<br/>com.google.common.collect.ForwardingSetMultimap<br/>com.google.common.collect.ForwardingSortedSetMultimap<br/>com.google.common.collect.HashMultimap<br/>com.google.common.collect.ImmutableListMultimap<br/>com.google.common.collect.ImmutableMultimap<br/>com.google.common.collect.ImmutableSetMultimap<br/>com.google.common.collect.LinkedHashMultimap<br/>com.google.common.collect.LinkedListMultimap<br/>com.google.common.collect.TreeMultimap<br/></td></tr></table>>];
1 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_10</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List removeAll(java.lang.Object)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>int size()<br/>interface java.util.Collection entries()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection values()<br/>interface java.util.List get(java.lang.Object)<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/></td></tr><tr><td>com.google.common.collect.ArrayListMultimap<br/>com.google.common.collect.ForwardingListMultimap<br/>com.google.common.collect.ImmutableListMultimap<br/>com.google.common.collect.LinkedListMultimap<br/></td></tr></table>>];
2 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_7</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List removeAll(java.lang.Object)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>class com.google.common.collect.ArrayListMultimap create(int, int)<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Collection entries()<br/>void trimToSize()<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.ArrayListMultimap create()<br/>interface java.util.Collection values()<br/>interface java.util.List get(java.lang.Object)<br/></td></tr><tr><td>com.google.common.collect.ArrayListMultimap<br/></td></tr></table>>];
3 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_0</td></tr><tr><td>interface java.util.Comparator keyComparator()<br/>interface java.util.Comparator valueComparator()<br/>interface java.util.List removeAll(java.lang.Object)<br/>class com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.LinkedHashMultimap create()<br/>interface java.util.SortedSet keySet()<br/>interface java.util.SortedMap asMap()<br/>interface java.util.Collection get(java.lang.Object)<br/>class com.google.common.collect.LinkedListMultimap create()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.TreeMultimap create()<br/>class com.google.common.collect.ImmutableMultimap inverse()<br/>class com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)<br/>interface java.util.SortedSet removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableSet get(java.lang.Object)<br/>boolean containsValue(java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableSetMultimap of()<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.ImmutableSet entries()<br/>class com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMap asMap()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.stream.Collector flatteningToImmutableListMultimap(java.util.function.Function, java.util.function.Function)<br/>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.SortedSet replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap$Builder builder()<br/>class com.google.common.collect.ArrayListMultimap create(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableList replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSetMultimap inverse()<br/>class com.google.common.collect.ImmutableSet replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.NavigableSet keySet()<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.NavigableMap asMap()<br/>class com.google.common.collect.HashMultimap create()<br/>interface java.util.Collection entries()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ArrayListMultimap create()<br/>interface java.util.stream.Collector toImmutableListMultimap(java.util.function.Function, java.util.function.Function)<br/>interface java.util.Collection values()<br/>class com.google.common.collect.LinkedHashMultimap create(com.google.common.collect.Multimap)<br/>interface java.util.stream.Collector flatteningToImmutableSetMultimap(java.util.function.Function, java.util.function.Function)<br/>class com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultiset keys()<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableListMultimap of()<br/>boolean isEmpty()<br/>class com.google.common.collect.ArrayListMultimap create(int, int)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>class com.google.common.collect.ImmutableList removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.LinkedHashMultimap create(int, int)<br/>class com.google.common.collect.LinkedListMultimap create(int)<br/>class com.google.common.collect.HashMultimap create(int, int)<br/>void forEach(java.util.function.BiConsumer)<br/>interface java.util.List entries()<br/>class com.google.common.collect.ImmutableMultimap of()<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object)<br/>interface java.util.List values()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.TreeMultimap create(java.util.Comparator, java.util.Comparator)<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSet keySet()<br/>class com.google.common.collect.ImmutableCollection entries()<br/>interface java.util.Set removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection values()<br/>class com.google.common.collect.ImmutableListMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableListMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableSet removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection get(java.lang.Object)<br/>interface java.util.SortedSet get(java.lang.Object)<br/>class com.google.common.collect.ImmutableList get(java.lang.Object)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>interface com.google.common.collect.Multiset keys()<br/>void trimToSize()<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.HashMultimap create(com.google.common.collect.Multimap)<br/>interface java.util.NavigableSet get(java.lang.Object)<br/>interface java.util.List get(java.lang.Object)<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.stream.Collector toImmutableSetMultimap(java.util.function.Function, java.util.function.Function)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableListMultimap inverse()<br/></td></tr><tr><td><br/></td></tr></table>>];
4 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_11</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>int size()<br/>interface java.util.Collection entries()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>interface java.util.Set removeAll(java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection values()<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/></td></tr><tr><td>com.google.common.collect.ForwardingSetMultimap<br/>com.google.common.collect.ForwardingSortedSetMultimap<br/>com.google.common.collect.HashMultimap<br/>com.google.common.collect.ImmutableSetMultimap<br/>com.google.common.collect.LinkedHashMultimap<br/>com.google.common.collect.TreeMultimap<br/></td></tr></table>>];
5 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_8</td></tr><tr><td>interface java.util.Comparator valueComparator()<br/>interface java.util.SortedSet replaceValues(java.lang.Object, java.lang.Iterable)<br/>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set removeAll(java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>interface java.util.SortedSet get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.SortedSet removeAll(java.lang.Object)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>interface java.util.Collection values()<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.ForwardingSortedSetMultimap<br/>com.google.common.collect.TreeMultimap<br/></td></tr></table>>];
6 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_6</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set removeAll(java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>class com.google.common.collect.HashMultimap create()<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>class com.google.common.collect.HashMultimap create(int, int)<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.HashMultimap create(com.google.common.collect.Multimap)<br/>interface java.util.Collection values()<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.HashMultimap<br/></td></tr></table>>];
7 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_5</td></tr><tr><td>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List removeAll(java.lang.Object)<br/>int size()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultiset keys()<br/>class com.google.common.collect.ImmutableListMultimap of()<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>class com.google.common.collect.ImmutableList removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap inverse()<br/>class com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.ImmutableMap asMap()<br/>class com.google.common.collect.ImmutableMultimap of()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.stream.Collector flatteningToImmutableListMultimap(java.util.function.Function, java.util.function.Function)<br/>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableListMultimap copyOf(com.google.common.collect.Multimap)<br/>interface java.util.List replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSet keySet()<br/>class com.google.common.collect.ImmutableCollection entries()<br/>class com.google.common.collect.ImmutableMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableCollection values()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableList replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableListMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableListMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection get(java.lang.Object)<br/>class com.google.common.collect.ImmutableList get(java.lang.Object)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Collection entries()<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object)<br/>interface com.google.common.collect.Multiset keys()<br/>interface java.util.stream.Collector toImmutableListMultimap(java.util.function.Function, java.util.function.Function)<br/>interface java.util.Collection values()<br/>interface java.util.List get(java.lang.Object)<br/>class com.google.common.collect.ImmutableListMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableListMultimap inverse()<br/></td></tr><tr><td>com.google.common.collect.ImmutableListMultimap<br/></td></tr></table>>];
8 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_4</td></tr><tr><td>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>class com.google.common.collect.ImmutableMultiset keys()<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap inverse()<br/>class com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableSet get(java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableSetMultimap of()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>class com.google.common.collect.ImmutableSet entries()<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.ImmutableMap asMap()<br/>class com.google.common.collect.ImmutableMultimap of()<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object)<br/>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSet keySet()<br/>class com.google.common.collect.ImmutableCollection entries()<br/>class com.google.common.collect.ImmutableMultimap$Builder builder()<br/>interface java.util.Set removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection values()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableSetMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableSetMultimap inverse()<br/>class com.google.common.collect.ImmutableSet replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSet removeAll(java.lang.Object)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection get(java.lang.Object)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>class com.google.common.collect.ImmutableSetMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSetMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.Collection values()<br/>interface java.util.stream.Collector flatteningToImmutableSetMultimap(java.util.function.Function, java.util.function.Function)<br/>interface java.util.stream.Collector toImmutableSetMultimap(java.util.function.Function, java.util.function.Function)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.ImmutableSetMultimap<br/></td></tr></table>>];
9 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_9</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap copyOf(java.lang.Iterable)<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>class com.google.common.collect.ImmutableSet keySet()<br/>class com.google.common.collect.ImmutableCollection entries()<br/>class com.google.common.collect.ImmutableMultimap$Builder builder()<br/>class com.google.common.collect.ImmutableMultiset keys()<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection values()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>interface java.util.Collection get(java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>class com.google.common.collect.ImmutableMultimap copyOf(com.google.common.collect.Multimap)<br/>class com.google.common.collect.ImmutableMultimap inverse()<br/>class com.google.common.collect.ImmutableCollection removeAll(java.lang.Object)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>interface java.util.Collection values()<br/>class com.google.common.collect.ImmutableMap asMap()<br/>class com.google.common.collect.ImmutableMultimap of()<br/>class com.google.common.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.ImmutableListMultimap<br/>com.google.common.collect.ImmutableMultimap<br/>com.google.common.collect.ImmutableSetMultimap<br/></td></tr></table>>];
10 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_3</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set removeAll(java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>class com.google.common.collect.LinkedHashMultimap create()<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>class com.google.common.collect.LinkedHashMultimap create(int, int)<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>interface java.util.Collection values()<br/>class com.google.common.collect.LinkedHashMultimap create(com.google.common.collect.Multimap)<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.LinkedHashMultimap<br/></td></tr></table>>];
11 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_2</td></tr><tr><td>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List removeAll(java.lang.Object)<br/>int size()<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.List replaceValues(java.lang.Object, java.lang.Iterable)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>boolean isEmpty()<br/>class com.google.common.collect.LinkedListMultimap create()<br/>interface java.util.Collection get(java.lang.Object)<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Collection entries()<br/>class com.google.common.collect.LinkedListMultimap create(int)<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.List entries()<br/>interface java.util.Map asMap()<br/>class com.google.common.collect.LinkedListMultimap create(com.google.common.collect.Multimap)<br/>interface java.util.Collection values()<br/>interface java.util.List get(java.lang.Object)<br/>interface java.util.List values()<br/></td></tr><tr><td>com.google.common.collect.LinkedListMultimap<br/></td></tr></table>>];
12 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_1</td></tr><tr><td>interface java.util.Comparator keyComparator()<br/>interface java.util.Comparator valueComparator()<br/>interface java.util.SortedSet replaceValues(java.lang.Object, java.lang.Iterable)<br/>boolean containsEntry(java.lang.Object, java.lang.Object)<br/>interface java.util.Set entries()<br/>interface java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)<br/>int size()<br/>class com.google.common.collect.TreeMultimap create(java.util.Comparator, java.util.Comparator)<br/>class com.google.common.collect.TreeMultimap create(com.google.common.collect.Multimap)<br/>boolean putAll(java.lang.Object, java.lang.Iterable)<br/>interface java.util.Set removeAll(java.lang.Object)<br/>boolean remove(java.lang.Object, java.lang.Object)<br/>interface java.util.SortedSet keySet()<br/>interface java.util.SortedMap asMap()<br/>boolean isEmpty()<br/>interface java.util.Collection get(java.lang.Object)<br/>interface java.util.SortedSet get(java.lang.Object)<br/>interface java.util.NavigableSet keySet()<br/>boolean put(java.lang.Object, java.lang.Object)<br/>void clear()<br/>boolean putAll(com.google.common.collect.Multimap)<br/>boolean containsKey(java.lang.Object)<br/>interface java.util.Set keySet()<br/>class com.google.common.collect.TreeMultimap create()<br/>interface java.util.NavigableMap asMap()<br/>interface java.util.SortedSet removeAll(java.lang.Object)<br/>interface java.util.Collection removeAll(java.lang.Object)<br/>interface java.util.Set get(java.lang.Object)<br/>interface java.util.Collection entries()<br/>interface com.google.common.collect.Multiset keys()<br/>void forEach(java.util.function.BiConsumer)<br/>boolean containsValue(java.lang.Object)<br/>interface java.util.Map asMap()<br/>interface java.util.NavigableSet get(java.lang.Object)<br/>interface java.util.Collection values()<br/>interface java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)<br/></td></tr><tr><td>com.google.common.collect.TreeMultimap<br/></td></tr></table>>];
	1:p -> 0:p
	4:p -> 0:p
	9:p -> 0:p
	2:p -> 1:p
	7:p -> 1:p
	11:p -> 1:p
	3:p -> 2:p
	5:p -> 4:p
	6:p -> 4:p
	8:p -> 4:p
	10:p -> 4:p
	12:p -> 5:p
	3:p -> 6:p
	3:p -> 7:p
	3:p -> 8:p
	7:p -> 9:p
	8:p -> 9:p
	3:p -> 10:p
	3:p -> 11:p
	3:p -> 12:p
}