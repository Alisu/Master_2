THERE_BE_DRAGONS_HERE
#push: was sent to nil
21 September 2018 10:38:50.581017 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

UndefinedObject(Object)>>doesNotUnderstand: #push:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	push: 1
		exception: 	MessageNotUnderstood: receiver of "push:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ mapile push: 1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(190461440)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2843148
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2843166
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2843148
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2843166
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(708008960))(a SearchMorp...etc...
		lastStepTime: 	2843144
		lastStepMessage: 	nil
		lastCycleTime: 	2843166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2843144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2843166
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(708008960))(a SearchMorp...etc...
		lastStepTime: 	2843144
		lastStepMessage: 	nil
		lastCycleTime: 	2843166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2843144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(708008960))(a SearchMorp...etc...
		lastStepTime: 	2843144
		lastStepMessage: 	nil
		lastCycleTime: 	2843166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2843144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(708008960))(a SearchMorp...etc...
		lastStepTime: 	2843144
		lastStepMessage: 	nil
		lastCycleTime: 	2843166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2843144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(708008960))(a SearchMorp...etc...
		lastStepTime: 	2843144
		lastStepMessage: 	nil
		lastCycleTime: 	2843166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2843144
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 September 2018 10:39:13.863524 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>errorSubscriptBounds:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
#(nil nil nil nil nil)

Array(Object)>>at:put:
	Receiver: #(nil nil nil nil nil)
	Arguments and temporary variables: 
		index: 	0
		value: 	1
	Receiver's instance variables: 
#(nil nil nil nil nil)

Pile>>push:
	Receiver: a Pile
	Arguments and temporary variables: 
		unObjet: 	1
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ maPile push: 1
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(190461440)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2866443
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	2866461
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	2866443
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	2866461
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(133400832))(a DropList...etc...
		lastStepTime: 	2866439
		lastStepMessage: 	nil
		lastCycleTime: 	2866461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2866439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	2866461
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(133400832))(a DropList...etc...
		lastStepTime: 	2866439
		lastStepMessage: 	nil
		lastCycleTime: 	2866461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2866439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(133400832))(a DropList...etc...
		lastStepTime: 	2866439
		lastStepMessage: 	nil
		lastCycleTime: 	2866461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2866439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(133400832))(a DropList...etc...
		lastStepTime: 	2866439
		lastStepMessage: 	nil
		lastCycleTime: 	2866461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2866439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(133400832))(a DropList...etc...
		lastStepTime: 	2866439
		lastStepMessage: 	nil
		lastCycleTime: 	2866461
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	2866439
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:put:
Pile>>push:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #push:
21 September 2018 11:04:39.787155 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Array(Object)>>doesNotUnderstand: #push:
	Receiver: #(nil nil nil nil nil nil nil nil nil nil)
	Arguments and temporary variables: 
		aMessage: 	push: 1
		exception: 	MessageNotUnderstood: Array>>push:
		resumeValue: 	nil
	Receiver's instance variables: 
#(nil nil nil nil nil nil nil nil nil nil)

[ :each | contenu push: each ] in Pile>>grow
	Receiver: une Pile, de taille: 10 contenant: 1 objets : (nil nil nil nil nil nil nil nil nil nil ).
	Arguments and temporary variables: 
		ancienContenu: 	#(1 nil nil nil nil)
		each: 	1
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil nil nil nil nil nil)
		index: 	1
		capacite: 	10


Array(SequenceableCollection)>>do:
	Receiver: #(1 nil nil nil nil)
	Arguments and temporary variables: 
		aBlock: 	[ :each | contenu push: each ]
		index: 	1
	Receiver's instance variables: 
#(1 nil nil nil nil)

Pile>>grow
	Receiver: une Pile, de taille: 10 contenant: 1 objets : (nil nil nil nil nil nil nil nil nil nil ).
	Arguments and temporary variables: 
		ancienContenu: 	#(1 nil nil nil nil)
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil nil nil nil nil nil)
		index: 	1
		capacite: 	10


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ maPile grow
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(557201152)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(190461440)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4392355
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4392369
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4392355
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4392369
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(377326592))(a DropList...etc...
		lastStepTime: 	4392347
		lastStepMessage: 	nil
		lastCycleTime: 	4392369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	4392347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4392369
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(377326592))(a DropList...etc...
		lastStepTime: 	4392347
		lastStepMessage: 	nil
		lastCycleTime: 	4392369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	4392347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(377326592))(a DropList...etc...
		lastStepTime: 	4392347
		lastStepMessage: 	nil
		lastCycleTime: 	4392369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	4392347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(377326592))(a DropList...etc...
		lastStepTime: 	4392347
		lastStepMessage: 	nil
		lastCycleTime: 	4392369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	4392347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(377326592))(a DropList...etc...
		lastStepTime: 	4392347
		lastStepMessage: 	nil
		lastCycleTime: 	4392369
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(898466816)))
		lastAlarmTime: 	4392347
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(456535040) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #push:
[ :each | contenu push: each ] in Pile>>grow
Array(SequenceableCollection)>>do:
Pile>>grow
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Pile cannot have variable sized instances
21 September 2018 11:12:24.492661 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>error:
	Receiver: Pile
	Arguments and temporary variables: 
		aString: 	'Pile cannot have variable sized instances'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>basicNew:
	Receiver: Pile
	Arguments and temporary variables: 
		sizeRequested: 	5
		ec: 	#'bad receiver'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>new:
	Receiver: Pile
	Arguments and temporary variables: 
		sizeRequested: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ maPile := Pile new: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(67791104)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(67791104)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(78283264)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4857074
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4857089
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4857074
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4857089
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847736832))(a DropList...etc...
		lastStepTime: 	4857068
		lastStepMessage: 	nil
		lastCycleTime: 	4857089
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4857068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4857089
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847736832))(a DropList...etc...
		lastStepTime: 	4857068
		lastStepMessage: 	nil
		lastCycleTime: 	4857089
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4857068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847736832))(a DropList...etc...
		lastStepTime: 	4857068
		lastStepMessage: 	nil
		lastCycleTime: 	4857089
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4857068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(326061056) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847736832))(a DropList...etc...
		lastStepTime: 	4857068
		lastStepMessage: 	nil
		lastCycleTime: 	4857089
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4857068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(847736832))(a DropList...etc...
		lastStepTime: 	4857068
		lastStepMessage: 	nil
		lastCycleTime: 	4857089
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4857068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(326061056) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>error:
Pile class(Behavior)>>basicNew:
Pile class(Behavior)>>new:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Pile cannot have variable sized instances
21 September 2018 11:12:36.466665 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

Pile class(Object)>>error:
	Receiver: Pile
	Arguments and temporary variables: 
		aString: 	'Pile cannot have variable sized instances'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>basicNew:
	Receiver: Pile
	Arguments and temporary variables: 
		sizeRequested: 	5
		ec: 	#'bad receiver'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


Pile class(Behavior)>>new:
	Receiver: Pile
	Arguments and temporary variables: 
		sizeRequested: 	5
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#grow->Pile>>#grow #initialize:->Pile>>#initiali...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->nil )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#HMIN305
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	a ReadStream
		itsSelection: 	a Text for ''
		itsSelectionString: 	''
	Receiver's instance variables: 
		ast: 	DoIt
	^ maPile := Pile new: 5
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(67791104)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(67791104)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(78283264)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4869030
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4869045
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4869030
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4869045
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(880105472))(a SearchMorp...etc...
		lastStepTime: 	4869022
		lastStepMessage: 	nil
		lastCycleTime: 	4869045
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4869022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		now: 	4869045
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(880105472))(a SearchMorp...etc...
		lastStepTime: 	4869022
		lastStepMessage: 	nil
		lastCycleTime: 	4869045
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4869022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(880105472))(a SearchMorp...etc...
		lastStepTime: 	4869022
		lastStepMessage: 	nil
		lastCycleTime: 	4869045
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4869022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(326061056) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(880105472))(a SearchMorp...etc...
		lastStepTime: 	4869022
		lastStepMessage: 	nil
		lastCycleTime: 	4869045
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4869022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(880105472))(a SearchMorp...etc...
		lastStepTime: 	4869022
		lastStepMessage: 	nil
		lastCycleTime: 	4869045
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(658209792)))
		lastAlarmTime: 	4869022
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(326061056) a Na...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (245094400) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Pile class(Object)>>error:
Pile class(Behavior)>>basicNew:
Pile class(Behavior)>>new:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:20:20.07162 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	55
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(742313472)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(296433920))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(296433920)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		event: 	[(1386@381) mouseUp 4631269 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1386@381) mouseUp 4631269 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
		m: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1386@381) mouseUp 4631269 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1386@381) mouseUp 4631269 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1386@381) mouseUp 4631269 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		timeStamp: 	4631269
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1386@381)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1386@381) mouseUp 4631269 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1386@381) mouseUp 4631269 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1386@381) mouseUp 4631269 nil]
		focusHolder: 	a PluggableButtonMorph(296433920)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1386@381.0) corner: (1402@397.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1386@381.0) corner: (1402@397.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296433920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1386@381) mouseUp 4631269 nil]
		targetOffset: 	(57.0@13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4631269 1386 381 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:20:25.067246 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(742313472)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(296433920))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(296433920)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		event: 	[(1357@388) mouseUp 4636300 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4636300 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
		m: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4636300 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4636300 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1357@388) mouseUp 4636300 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		timeStamp: 	4636300
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1357@388)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4636300 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4636300 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4636300 nil]
		focusHolder: 	a PluggableButtonMorph(296433920)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1357@388.0) corner: (1373@404.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1357@388.0) corner: (1373@404.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296433920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1357@388) mouseUp 4636300 nil]
		targetOffset: 	(28.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4636300 1357 388 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:20:28.111052 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(742313472)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(296433920))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(296433920)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		event: 	[(1357@388) mouseUp 4639349 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4639349 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
		m: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4639349 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4639349 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1357@388) mouseUp 4639349 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		timeStamp: 	4639349
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1357@388)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4639349 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4639349 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4639349 nil]
		focusHolder: 	a PluggableButtonMorph(296433920)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1357@388.0) corner: (1373@404.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1357@388.0) corner: (1373@404.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296433920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1357@388) mouseUp 4639349 nil]
		targetOffset: 	(28.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4639349 1357 388 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:20:28.897991 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(742313472)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(296433920))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(296433920)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		event: 	[(1357@388) mouseUp 4640100 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4640100 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
		m: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4640100 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640100 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1357@388) mouseUp 4640100 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		timeStamp: 	4640100
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1357@388)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640100 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640100 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640100 nil]
		focusHolder: 	a PluggableButtonMorph(296433920)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1357@388.0) corner: (1373@404.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1357@388.0) corner: (1373@404.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296433920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1357@388) mouseUp 4640100 nil]
		targetOffset: 	(28.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4640100 1357 388 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:20:29.576536 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(742313472)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(296433920))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(296433920)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		event: 	[(1357@388) mouseUp 4640805 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4640805 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
		m: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(296433920))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		evt: 	[(1357@388) mouseUp 4640805 nil]
		all: 	an Array(a PluggableButtonMorph(206694912) a PluggableButtonMorph(29643392...etc...
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640805 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1357@388) mouseUp 4640805 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(296433920)
	Receiver's instance variables: 
		timeStamp: 	4640805
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1357@388)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640805 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(296433920)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640805 nil]
	Receiver's instance variables: 
		bounds: 	(1329.0@368.0) corner: (1401.0@396.0)
		owner: 	a PanelMorph(370618880)
		submorphs: 	an Array(an AlignmentMorph(217615104))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (179995136) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(451566080)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1357@388) mouseUp 4640805 nil]
		focusHolder: 	a PluggableButtonMorph(296433920)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1357@388.0) corner: (1373@404.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1357@388.0) corner: (1373@404.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(296433920)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1357@388) mouseUp 4640805 nil]
		targetOffset: 	(28.0@20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4640805 1357 388 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Invalid definition string
28 September 2018 11:21:04.049473 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

RBAddClassChange class(Object)>>error:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Invalid definition string'
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
		aController: 	nil
		parseTree: 	RBMessageNode(Class
	immediateSubclass: #PileGrossissante
	instanceV...etc...
		context: 	a SmallDictionary()
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
	Receiver: RBAddClassChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		superclass: 	RBRefactoryDefinitionChange
		methodDict: 	a MethodDictionary(#asUndoOperation->RBAddClassChange>>#asUndoOpera...etc...
		format: 	65547
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#RBAddClassChange
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Refactoring-Changes'
		traitComposition: 	{}
		localSelectors: 	nil


RBCompositeRefactoryChange>>defineClass:
	Receiver: a RBCompositeRefactoryChange
	Arguments and temporary variables: 
		aString: 	'Class immediateSubclass: #PileGrossissante
	instanceVariableNames: ''...etc...
	Receiver's instance variables: 
		name: 	nil
		changes: 	an OrderedCollection()


[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
		each: 	PileGrossissante
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante)
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
classChanges defineClass: each definition.
each class instVa...etc...
		index: 	1
	Receiver's instance variables: 
		array: 	{PileGrossissante}
		firstIndex: 	1
		lastIndex: 	1


RBRemoveClassChange>>asUndoOperation
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		classChanges: 	a RBCompositeRefactoryChange
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 
		aBlock: 	[  ]
		undo: 	nil
	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


RBRemoveClassChange(RBRefactoryChange)>>execute
	Receiver: PileGrossissante removeFromSystem!
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	nil
		className: 	#PileGrossissante
		isMeta: 	false


[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


BlockClosure>>ensure:
	Receiver: [ self addUndo: aRefactoringChange execute ]
	Arguments and temporary variables: 
		aBlock: 	[ isPerformingRefactoring := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	RBRefactoryChangeManager>>performChange:
		startpc: 	55
		numArgs: 	0


RBRefactoryChangeManager>>ignoreChangesWhile:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aBlock: 	[ self addUndo: aRefactoringChange execute ]
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


RBRefactoryChangeManager>>performChange:
	Receiver: a RBRefactoryChangeManager
	Arguments and temporary variables: 
		aRefactoringChange: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		undo: 	an OrderedCollection()
		redo: 	an OrderedCollection()
		isPerformingRefactoring: 	true


[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 
		change: 	PileGrossissante removeFromSystem!
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


OrderedCollection>>do:
	Receiver: an OrderedCollection(PileGrossissante removeFromSystem!)
	Arguments and temporary variables: 
		aBlock: 	[ :change | RBRefactoryChangeManager instance performChange: change ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(PileGrossissante removeFromSystem! nil nil nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


BlockClosure>>cull:
	Receiver: [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: cha...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	ChangesBrowser>>accept
		startpc: 	122
		numArgs: 	0


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	8


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		traitComposition: 	{}
		localSelectors: 	nil
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance ...etc...
		currentValue: 	0
		min: 	0
		max: 	100
		title: 	'Refactoring'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


ChangesBrowser>>accept
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ self accept ] in ChangesBrowser>>open
	Receiver: a ChangesBrowser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter a MorphicContainerAdapt...etc...
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a TreeModel a TextModel an OkCancelToolbar)
		owner: 	nil
		window: 	a NewValueHolder[ a DialogWindowModel ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character escape->[ self cancel ] Meta + s-...etc...
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Changes Browser' ]
		textArea: 	a TextModel
		scopeChooser: 	nil
		changesTree: 	a TreeModel
		changes: 	an Array(a RBRemoveClassRefactoring)


[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
	Receiver: an OkCancelToolbar
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicContainerAdapter)
		announceur: 	nil
		focusOrder: 	an OrderedCollection(a ButtonModel a ButtonModel a DialogWindowMode...etc...
		owner: 	a SpecDialogWindow(1063036672)
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Ok Cancel' ]
		okButton: 	a ButtonModel
		okAction: 	a NewValueHolder[ [ self accept ] ]
		cancelButton: 	a ButtonModel
		cancelAction: 	a NewValueHolder[ [ self cancel ] ]
		cancelled: 	a NewValueHolder[ false ]


ButtonModel>>performAction
	Receiver: a ButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a MorphicButtonAdapter)
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an OkCancelToolbar
		window: 	a NewValueHolder[ nil ]
		spec: 	a SpecWrapper
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary(Character space->[ self action ] )
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Button' ]
		helpHolder: 	a NewValueHolder[ nil ]
		borderWidth: 	a NewValueHolder[ 0 ]
		borderColor: 	a NewValueHolder[ Color transparent ]
		enabledHolder: 	a NewValueHolder[ true ]
		dragEnabled: 	a NewValueHolder[ false ]
		dropEnabled: 	a NewValueHolder[ false ]
		dragTransformationBlock: 	a NewValueHolder[ [ :item :source | item ] ]
		wantDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source | self dropEnabl...etc...
		acceptDropBlock: 	a NewValueHolder[ [ :draggedItem :event :source |  ] ]
		transferBlock: 	a NewValueHolder[ [ :passenger :source | self transferFor: passe...etc...
		color: 	a NewValueHolder[ (Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0) ]
		actionHolder: 	a NewValueHolder[ [ okAction value value == false
	ifFalse: [ own...etc...
		labelHolder: 	a CollectionValueHolder[ 'Ok' ]
		fontHolder: 	a NewValueHolder[ nil ]
		stateHolder: 	a NewValueHolder[ false ]
		actionPerformedHolder: 	a NewValueHolder[ nil ]
		askBeforeChangingHolder: 	a NewValueHolder[ false ]
		iconHolder: 	a NewValueHolder[ nil ]
		menuHolder: 	a NewValueHolder[ a MenuModel ]
		shortcutHolder: 	a NewValueHolder[ nil ]


MorphicButtonAdapter>>action
	Receiver: a MorphicButtonAdapter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a PluggableButtonMorph(695715584))
		announceur: 	nil
		model: 	a ButtonModel
		widget: 	a PluggableButtonMorph(695715584)
		selector: 	nil


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		event: 	[(1550@403) mouseUp 4675277 nil]
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		evt: 	[(1550@403) mouseUp 4675277 nil]
		all: 	an Array(a PluggableButtonMorph(455625984) a PluggableButtonMorph(69571558...etc...
		m: 	a PluggableButtonMorph(695715584)
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(455625984) a PluggableButtonMorph(695715584))
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	2
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(455625984) a PluggableButtonMorph(695715584))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		evt: 	[(1550@403) mouseUp 4675277 nil]
		all: 	an Array(a PluggableButtonMorph(455625984) a PluggableButtonMorph(69571558...etc...
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		anEvent: 	[(1550@403) mouseUp 4675277 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(1550@403) mouseUp 4675277 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(695715584)
	Receiver's instance variables: 
		timeStamp: 	4675277
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1550@403)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		anEvent: 	[(1550@403) mouseUp 4675277 nil]
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(695715584)
	Arguments and temporary variables: 
		anEvent: 	[(1550@403) mouseUp 4675277 nil]
	Receiver's instance variables: 
		bounds: 	(1520.0@395.0) corner: (1592.0@423.0)
		owner: 	a PanelMorph(921132288)
		submorphs: 	an Array(an AlignmentMorph(263165952))
		fullBounds: 	nil
		color: 	(Color r: 0.29 g: 0.28800000000000003 b: 0.28800000000000003 alpha: 1.0)...etc...
		extension: 	a MorphExtension (983401984) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a MorphicButtonAdapter
		label: 	a Text for 'Ok'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	#state
		actionSelector: 	#action
		font: 	nil
		getLabelSelector: 	#label
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	false
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	#enabled
		getFontSelector: 	#font
		lastColor: 	nil
		labelMorph: 	a TextMorph(1005410048)
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1550@403) mouseUp 4675277 nil]
		focusHolder: 	a PluggableButtonMorph(695715584)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1550@403.0) corner: (1566@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1550@403.0) corner: (1566@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(695715584)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1550@403) mouseUp 4675277 nil]
		targetOffset: 	(30.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4675277 1550 403 0 0 0 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0



--- The full stack ---
RBAddClassChange class(Object)>>error:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:for:
RBAddClassChange class(RBRefactoryDefinitionChange class)>>definition:
RBCompositeRefactoryChange>>defineClass:
[ :each | 
classChanges defineClass: each definition.
each class instVarNames
	do:
		[ :varName | classChanges addInstanceVariable: varName to: each class ].
each selectors
	do:
		[ :selector | classChanges compile: (each sourceCodeAt: selector) in: each ].
each class selectors
	do: [ :selector | 
		classChanges
			compile: (each class sourceCodeAt: selector)
			in: each class ] ] in RBRemoveClassChange>>asUndoOperation
OrderedCollection>>do:
RBRemoveClassChange>>asUndoOperation
RBRemoveClassChange(RBRefactoryClassChange)>>executeNotifying:
RBRemoveClassChange(RBRefactoryChange)>>execute
[ self addUndo: aRefactoringChange execute ] in RBRefactoryChangeManager>>performChange:
BlockClosure>>ensure:
RBRefactoryChangeManager>>ignoreChangesWhile:
RBRefactoryChangeManager>>performChange:
[ :change | RBRefactoryChangeManager instance performChange: change ] in [ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
OrderedCollection>>do:
[ self pickedChanges
	do: [ :change | RBRefactoryChangeManager instance performChange: change ] ] in ChangesBrowser>>accept
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
ChangesBrowser>>accept
[ self accept ] in ChangesBrowser>>open
[ okAction value value == false
	ifFalse: [ owner ifNil: [ self delete ] ifNotNil: [ owner delete ] ] ] in OkCancelToolbar(OkToolbar)>>okActionBlock
ButtonModel>>performAction
MorphicButtonAdapter>>action
PluggableButtonMorph>>performAction:
[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of BlockClosure did not understand #methodClass:
28 September 2018 12:05:28.212406 pm

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

BlockClosure(Object)>>doesNotUnderstand: #methodClass:
	Receiver: [ true ]
	Arguments and temporary variables: 
		aMessage: 	methodClass: PileGrossissante
		exception: 	MessageNotUnderstood: BlockClosure>>methodClass:
		resumeValue: 	nil
	Receiver's instance variables: 
		outerContext: 	IDM class>>DoIt
		startpc: 	130
		numArgs: 	0


PileGrossissante class(Behavior)>>basicAddSelector:withMethod:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#push
		compiledMethod: 	[ true ]
		oldMethodOrNil: 	nil
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary(#grow->PileGrossissante>>#grow #push->[ true ] )...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


PileGrossissante class(Behavior)>>addSelectorSilently:withMethod:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#push
		compiledMethod: 	[ true ]
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary(#grow->PileGrossissante>>#grow #push->[ true ] )...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


PileGrossissante class(ClassDescription)>>addSelectorSilently:withMethod:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#push
		compiledMethod: 	[ true ]
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary(#grow->PileGrossissante>>#grow #push->[ true ] )...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


PileGrossissante class(ClassDescription)>>addSelector:withMethod:notifying:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#push
		compiledMethod: 	[ true ]
		requestor: 	nil
		priorMethodOrNil: 	nil
		oldProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary(#grow->PileGrossissante>>#grow #push->[ true ] )...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


PileGrossissante class(Behavior)>>addSelector:withMethod:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#push
		compiledMethod: 	[ true ]
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary(#grow->PileGrossissante>>#grow #push->[ true ] )...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


IDM class>>DoIt
	Receiver: IDM
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#idmPile->IDM>>#idmPile )
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IDM
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'HMIN305-Pile'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'	Pile subclass: #PileGrossissante
	instanceVariableNames:'''' ...etc...
		itsSelection: 	a Text for '	Pile subclass: #PileGrossissante
	instanceVariableNa...etc...
		itsSelectionString: 	'	Pile subclass: #PileGrossissante
	instanceVariableNames:'...etc...
	Receiver's instance variables: 
		ast: 	DoIt
	Pile
		subclass: #PileGrossissante
		instanceVariableNames: ''
		cla...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	IDM
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | result ]
		result: 	nil
		rcvr: 	IDM
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(433044480)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelectionAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(433044480)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>evaluateSelection
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(433044480)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubSmalltalkEditor>>doIt
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(433044480)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


RubScrolledTextMorph(Object)>>perform:orSendTo:
	Receiver: a RubScrolledTextMorph(81868544)
	Arguments and temporary variables: 
		selector: 	#doIt
		otherTarget: 	a RubSmalltalkEditor
	Receiver's instance variables: 
		bounds: 	(1066.0@375.0) corner: (1906.0@621.0)
		owner: 	a PanelMorph(505376000)
		submorphs: 	an Array(a RubTextScrollPane(902211072) a RubAdornmentDisplayer(5571...etc...
		fullBounds: 	(1066@375) corner: (1906@621)
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (825156864) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(902211072)
		rulers: 	a SortedCollection(a NautilusAnnotationDisplayer(987149824) a RubTextSe...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		evt: 	[(1133@477) mouseUp 7339417 nil]
		w: 	a WorldMorph(562956288) [world]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		evt: 	[(1133@477) mouseUp 7339417 nil]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		evt: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MouseButtonEvent>>sentTo:
	Receiver: [(1133@477) mouseUp 7339417 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(521538048)'Do it'
	Receiver's instance variables: 
		timeStamp: 	7339417
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1133@477)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a ToggleMenuItemMorph(521538048)'Do it'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(1133@477) mouseUp 7339417 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	7339417
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1133@477)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a ToggleMenuItemMorph(521538048)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a ToggleMenuItemMorph(521538048)'Do it'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(521538048)'Do it'
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		owner: 	a MenuMorph(172056320)
		submorphs: 	#()
		fullBounds: 	(1099.0@468.0) corner: (1298.0@485.0)
		color: 	Color white
		extension: 	a MorphExtension (1039789824)
		font: 	a LogicalFont
 familyName: Source Sans Pro
 emphasis: nil
 pointSize: 10
...etc...
		emphasis: 	0
		contents: 	'Do it'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a RubScrolledTextMorph(81868544)
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#doIt a RubSmalltalkEditor)
		icon: 	Form(13x13x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	'd'


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a MenuMorph(172056320)
		localEvt: 	[(1133@477) mouseUp 7339417 nil]
		index: 	5
		child: 	a ToggleMenuItemMorph(521538048)'Do it'
		morphs: 	an Array(a ToggleMenuItemMorph(713776384)'Format' a ToggleMenuItemMorph...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


MouseButtonEvent>>sentTo:
	Receiver: [(1133@477) mouseUp 7339417 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	7339417
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(1133@477)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a MenuMorph(172056320)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		aMorph: 	a MenuMorph(172056320)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(521538048)'Do it'


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(172056320)
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(713776384)'Format' a ToggleMenuItemMo...etc...
		fullBounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (48865536) [other:  (basicColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(521538048)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(172056320)
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		bounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(713776384)'Format' a ToggleMenuItemMo...etc...
		fullBounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (48865536) [other:  (basicColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(521538048)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(172056320)
	Arguments and temporary variables: 
		evt: 	[(1133@477) mouseUp 7339417 nil]
	Receiver's instance variables: 
		bounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(713776384)'Format' a ToggleMenuItemMo...etc...
		fullBounds: 	(1095.0@407.0) corner: (1302.0@798.0)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (48865536) [other:  (basicColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(521538048)'Do it'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		titleMorph: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1133@477) mouseUp 7339417 nil]
		focusHolder: 	a MenuMorph(172056320)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1133@477.0) corner: (1149@493.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1133@477.0) corner: (1149@493.0)
		color: 	Color blue
		extension: 	a MorphExtension (94399744)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1133@477) mouseUp 7339417 nil]
		targetOffset: 	(34.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7339417 1133 477 0 0 0 1)
		lastKeyScanCode: 	34
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>doesNotUnderstand: #methodClass:
PileGrossissante class(Behavior)>>basicAddSelector:withMethod:
PileGrossissante class(Behavior)>>addSelectorSilently:withMethod:
PileGrossissante class(ClassDescription)>>addSelectorSilently:withMethod:
PileGrossissante class(ClassDescription)>>addSelector:withMethod:notifying:
PileGrossissante class(Behavior)>>addSelector:withMethod:
IDM class>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>evaluateSelectionAndDo:
RubSmalltalkEditor>>evaluateSelection
RubSmalltalkEditor>>doIt
RubScrolledTextMorph(Object)>>perform:orSendTo:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldState>>doOneSubCycleFor:
WorldMorph>>doOneSubCycle
MenuMorph>>invokeModalAt:in:allowKeyboard:
MenuMorph>>invokeModal:
MenuMorph>>invokeModal
RubEditingArea(RubAbstractTextArea)>>yellowButtonActivity:
RubEditingArea(RubAbstractTextArea)>>mouseDown:
RubEditingArea(Morph)>>handleMouseDown:
MouseButtonEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubEditingArea(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
TransformWithLayoutMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubTextScrollPane(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
RubScrolledTextMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
PanelMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
NautilusWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of IDM did not understand #idmpile
5 October 2018 11:08:53.357203 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

IDM(Object)>>doesNotUnderstand: #idmpile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
		aMessage: 	idmpile
		exception: 	MessageNotUnderstood: IDM>>idmpile
		resumeValue: 	nil
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i idmpile.'
		itsSelection: 	a Text for 'i idmpile.'
		itsSelectionString: 	'i idmpile.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmpile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of IDM did not understand #idmpile
5 October 2018 11:09:04.682642 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

IDM(Object)>>doesNotUnderstand: #idmpile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
		aMessage: 	idmpile
		exception: 	MessageNotUnderstood: IDM>>idmpile
		resumeValue: 	nil
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'
i idmpile.'
		itsSelection: 	a Text for '
i idmpile.'
		itsSelectionString: 	'
i idmpile.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ i idmpile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(512386816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@50)
		owner: 	a TransformWithLayoutMorph(279821568)
		submorphs: 	an Array(a RubPrimarySelectionMorph(822435328) a RubCursor(253863680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908720640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1048066048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(253863680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1041867264))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(428598016))(a DropList...etc...
		lastStepTime: 	4673505
		lastStepMessage: 	nil
		lastCycleTime: 	4673526
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4673505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key #grow not found in MethodDictionary
5 October 2018 11:09:59.570631 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		aKey: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	6
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


PileGrossissante class(Behavior)>>compiledMethodAt:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#grow
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary()
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(512386816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@50)
		owner: 	a TransformWithLayoutMorph(279821568)
		submorphs: 	an Array(a RubPrimarySelectionMorph(822435328) a RubCursor(253863680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908720640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1048066048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(253863680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(490833408))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(112@66)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(565787136))(a SearchMorp...etc...
		lastStepTime: 	4728356
		lastStepMessage: 	nil
		lastCycleTime: 	4728379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4728356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(33238016) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(565787136))(a SearchMorp...etc...
		lastStepTime: 	4728356
		lastStepMessage: 	nil
		lastCycleTime: 	4728379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4728356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(565787136))(a SearchMorp...etc...
		lastStepTime: 	4728356
		lastStepMessage: 	nil
		lastCycleTime: 	4728379
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4728356
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
KeyNotFound: key #grow not found in MethodDictionary
5 October 2018 11:10:24.487742 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		aKey: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	6
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary()
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	0
		array: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...


PileGrossissante class(Behavior)>>compiledMethodAt:
	Receiver: PileGrossissante
	Arguments and temporary variables: 
		selector: 	#grow
	Receiver's instance variables: 
		superclass: 	Pile
		methodDict: 	a MethodDictionary()
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PileGrossissante
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(512386816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@50)
		owner: 	a TransformWithLayoutMorph(279821568)
		submorphs: 	an Array(a RubPrimarySelectionMorph(822435328) a RubCursor(253863680...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (908720640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1048066048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(253863680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(697027584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(112@66)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 2 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(788922624))(a DropList...etc...
		lastStepTime: 	4753298
		lastStepMessage: 	nil
		lastCycleTime: 	4753319
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4753298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(33238016) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(788922624))(a DropList...etc...
		lastStepTime: 	4753298
		lastStepMessage: 	nil
		lastCycleTime: 	4753319
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4753298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(788922624))(a DropList...etc...
		lastStepTime: 	4753298
		lastStepMessage: 	nil
		lastCycleTime: 	4753319
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4753298
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(33238016) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MethodDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
MethodDictionary>>at:ifAbsent:
MethodDictionary(Dictionary)>>at:
PileGrossissante class(Behavior)>>compiledMethodAt:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
OCAbortCompilation
5 October 2018 11:12:13.589388 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object		codeString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		doitFlag: 	false		errorString: 	'Unknown character'		location: 	43		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Unknown character'
		errorPosition: 	43
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection(RBMessageNode(self isFull
	ifTrue: [ self grow...etc...
		return: 	false
		periods: 	an OrderedCollection(40)
		returnPosition: 	nil
		node: 	RBMessageNode(self isFull
	ifTrue: [ self grow ])
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		aBlock: 	nil		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
OCAbortCompilation
5 October 2018 11:12:45.327045 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
	Receiver: SyntaxErrorNotification
	Arguments and temporary variables: 
		aClass: 	Object		codeString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		doitFlag: 	false		errorString: 	'Unknown character'		location: 	43		sourceCode: 	nil
	Receiver's instance variables: 
		superclass: 	Notification
		methodDict: 	a MethodDictionary(#defaultAction->SyntaxErrorNotification>>#defaul...etc...
		format: 	65546
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SyntaxErrorNotification
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-Exception'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser>>parserError:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'Variable or expression expected'
		errorNode: 	nil
		errorMessage: 	'Unknown character'
		errorPosition: 	43
		newSource: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parsePrimitiveObject
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseUnaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseBinaryMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseKeywordMessage
	Receiver: a RBParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseCascadeMessage
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		receiver: 	nil
		messages: 	nil
		semicolons: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseAssignment
	Receiver: a RBParser
	Arguments and temporary variables: 
		node: 	nil
		position: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatementList:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		sequenceNode: 	RBSequenceNode()
		statements: 	an OrderedCollection(RBMessageNode(self isFull
	ifTrue: [ self grow...etc...
		return: 	false
		periods: 	an OrderedCollection(40)
		returnPosition: 	nil
		node: 	RBMessageNode(self isFull
	ifTrue: [ self grow ])
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseStatements:into:
	Receiver: a RBParser
	Arguments and temporary variables: 
		pragmaBoolean: 	true
		aSequenceNode: 	RBSequenceNode()
		temps: 	#()
		leftBar: 	nil
		rightBar: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod
	Receiver: a RBParser
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


RBParser>>parseMethod:
	Receiver: a RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		node: 	nil
	Receiver's instance variables: 
		scanner: 	a RBScanner
		currentToken: 	 RBErrorToken('̂')
		nextToken: 	nil
		errorBlock: 	nil
		source: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
		comments: 	an OrderedCollection()
		pragmas: 	nil


[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		aBlock: 	nil		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


BlockClosure>>on:do:
	Receiver: [ parser parseMethod: aString ]
	Arguments and temporary variables: 
		exception: 	ReparseAfterSourceEditing
		handlerAction: 	[ :exception | self parseMethod: exception newSource onError: aB...etc...
	Receiver's instance variables: 
		outerContext: 	RBParser class>>parseMethod:onError:
		startpc: 	98
		numArgs: 	0


RBParser class>>parseMethod:onError:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'		aBlock: 	nil		parser: 	a RBParser
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


RBParser class>>parseMethod:
	Receiver: RBParser
	Arguments and temporary variables: 
		aString: 	'push:o self isFull ifTrue:[self grow]. ̂super push: o'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addCommentsTo:->RBParser>>#addCommentsTo: #addP...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{RBPatternParser}
		name: 	#RBParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'AST-Core-Parser'
		traitComposition: 	{}
		localSelectors: 	nil


OpalCompiler>>parseMethod
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		parseClass: 	RBParser
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


OpalCompiler>>parse
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		expression: 	nil
		selector: 	nil
		arguments: 	nil
		method: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	Arguments and temporary variables: 
		exception: 	OCSourceCodeChanged
		handlerAction: 	[ :notification | 
self source: notification newSourceCode.
noti...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ...etc...
		startpc: 	213
		numArgs: 	0


[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


BlockClosure>>on:do:
	Receiver: [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChange...etc...
	Arguments and temporary variables: 
		exception: 	SyntaxErrorNotification
		handlerAction: 	[ :exception | 
self compilationContext requestor
	ifNotNil: [ s...etc...
	Receiver's instance variables: 
		outerContext: 	OpalCompiler>>compile
		startpc: 	209
		numArgs: 	0


OpalCompiler>>compile
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		cm: 	nil
	Receiver's instance variables: 
		ast: 	nil
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
		b: 	false
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(512386816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@50)
		owner: 	a TransformWithLayoutMorph(279821568)
		submorphs: 	an Array(a RubPrimarySelectionMorph(822435328) a RubCursor(253863680...etc...
		fullBounds: 	(0@0) corner: (285@50)
		color: 	Color transparent
		extension: 	a MorphExtension (908720640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1048066048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(253863680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1064751872))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(112@66)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(462651648))(a SearchMorp...etc...
		lastStepTime: 	4894201
		lastStepMessage: 	nil
		lastCycleTime: 	4894201
		alarms: 	a Heap()
		lastAlarmTime: 	4894201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(303798272) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(462651648))(a SearchMorp...etc...
		lastStepTime: 	4894201
		lastStepMessage: 	nil
		lastCycleTime: 	4894201
		alarms: 	a Heap()
		lastAlarmTime: 	4894201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(462651648))(a SearchMorp...etc...
		lastStepTime: 	4894201
		lastStepMessage: 	nil
		lastCycleTime: 	4894201
		alarms: 	a Heap()
		lastAlarmTime: 	4894201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a NautilusWindow(303798272) a GLM...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
SyntaxErrorNotification class>>inClass:withCode:doitFlag:errorMessage:location:
RBParser>>parserError:
RBParser>>parsePrimitiveObject
RBParser>>parseUnaryMessage
RBParser>>parseBinaryMessage
RBParser>>parseKeywordMessage
RBParser>>parseCascadeMessage
RBParser>>parseAssignment
RBParser>>parseStatementList:into:
RBParser>>parseStatements:into:
RBParser>>parseMethod
RBParser>>parseMethod:
[ parser parseMethod: aString ] in RBParser class>>parseMethod:onError:
BlockClosure>>on:do:
RBParser class>>parseMethod:onError:
RBParser class>>parseMethod:
OpalCompiler>>parseMethod
OpalCompiler>>parse
[ ast := self parse.
self doSemanticAnalysis.
self callPlugins ] in [ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
[ [ ast := self parse.
self doSemanticAnalysis.
self callPlugins ]
	on: OCSourceCodeChanged
	do: [ :notification | 
		self source: notification newSourceCode.
		notification retry ].
cm := ast generate: self compilationContext compiledMethodTrailer ] in OpalCompiler>>compile
BlockClosure>>on:do:
OpalCompiler>>compile
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
KeyNotFound: key #grow not found in MethodDictionary
5 October 2018 11:12:57.222381 am

VM: unix - x86_64 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
StackToRegisterMappingCogit VMMaker.oscog-eem.2380 uuid: c76d37e1-445c-4e34-9796-fc836dfd50c9 May  9 2018
VM: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Wed May 9 10:36:12 2018 CommitHash: 334be97 Plugins: 201805090836 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo6.0 [Latest update: #60543]

MethodDictionary(Dictionary)>>errorKeyNotFound:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		aKey: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#size. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>#is...etc...


[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#size. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>#is...etc...


MethodDictionary>>at:ifAbsent:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
		aBlock: 	[ self errorKeyNotFound: key ]
		index: 	6
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#size. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>#is...etc...


MethodDictionary(Dictionary)>>at:
	Receiver: a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #initialize:->Pile>>#initia...etc...
	Arguments and temporary variables: 
		key: 	#grow
	Receiver's instance variables: 
		tally: 	10
		array: 	{Pile>>#size. nil. nil. Pile>>#push:. nil. nil. nil. nil. nil. Pile>>#is...etc...


Pile class(Behavior)>>compiledMethodAt:
	Receiver: Pile
	Arguments and temporary variables: 
		selector: 	#grow
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#capacity->Pile>>#capacity #do:->Pile>>#do: #ini...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{IDM. PileTypee. PileGrossissante}
		name: 	#Pile
		classPool: 	a Dictionary(#tailleDefaut->5 )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#MetaProg
		traitComposition: 	{}
		localSelectors: 	nil


IDM>>idmPile
	Receiver: une Pile, de taille: 5 contenant: 0 objets : (nil nil nil nil nil )
	Arguments and temporary variables: 
		b: 	true
	Receiver's instance variables: 
		contenu: 	#(nil nil nil nil nil)
		index: 	0
		capacite: 	5


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'i:=IDM new.
i idmPile.'
		itsSelection: 	a Text for 'i:=IDM new.
i idmPile.'
		itsSelectionString: 	'i:=IDM new.
i idmPile.'
	Receiver's instance variables: 
		ast: 	DoIt
	i := IDM new.
	^ i idmPile
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(512386816)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(512386816)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (285@50)
		owner: 	a TransformWithLayoutMorph(279821568)
		submorphs: 	an Array(a RubPrimarySelectionMorph(822435328) a RubCursor(253863680...etc...
		fullBounds: 	(0@0) corner: (285@50)
		color: 	Color transparent
		extension: 	a MorphExtension (908720640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1048066048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(253863680)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(548529408))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(112@66)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(115479552)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(475499008))(a DropList...etc...
		lastStepTime: 	4906068
		lastStepMessage: 	nil
		lastCycleTime: 	4906066
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4906068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(33238016) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(475499008))(a DropList...etc...
		lastStepTime: 	4906068
		lastStepMessage: 	nil
		lastCycleTime: 	4906066
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4906068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1920@1031)
		canvas: 	a FormCanvas on: DisplayScreen(1920x1031x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(475499008))(a DropList...etc...
		lastStepTime: 	4906068
		lastStepMessage: 	nil
		lastCycleTime: 	4906066
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(253863680)))
		lastAlarmTime: 	4906068
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1920@1031)
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(804941056) a GLMSystemWindow(33238016) a Nau...etc...
		fullBounds: 	(0@0) corner: (1920@1031)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (876095488) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
MethodDictionary(Dictionary)>>errorKeyNotFound:
[ self errorKeyNotFound: key ] in MethodDictionary(Dictionary)>>at:
MethodDictionary>>at:ifAbsent:
MethodDictionary(Dictionary)>>at:
Pile class(Behavior)>>compiledMethodAt:
IDM>>idmPile
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

