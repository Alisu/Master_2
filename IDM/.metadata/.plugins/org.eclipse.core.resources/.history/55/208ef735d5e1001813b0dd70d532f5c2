package umlutils;

import java.util.ArrayList;

import org.eclipse.emf.*;
import org.eclipse.emf.common.util.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLMapImpl;

import com.sun.management.VMOption.Origin;
import com.sun.xml.internal.bind.v2.schemagen.xmlschema.Element;

import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.Class;
//import org.eclipse.uml2.uml.UMLFactory;
import org.eclipse.uml2.uml.*;

public class LoadUML {

	static UMLFactory factory = UMLFactory.eINSTANCE;
	
	public static void main(String[] args) {
		
		//Instruction récupérant le modèle sous forme d'arbre à partir de la classe racine "Model"
		Model umlP = chargerModele("model/model.uml");
		
		
		String nomModele=  umlP.getName();
		
		System.out.println("Ton modèle se nomme: \""+nomModele+"\"");
		
	
		//Modifier le nom du modèle UML
		umlP.setName("NewModelName");
		System.out.println("\""+nomModele+"\" Changé ! Le modèle se nomme: \""+umlP.getName()+"\"");
		
		
		//Sauvegarder le modèle avec son nouveau nom
		sauverModele("model/changerNom.uml", umlP);
		
	}
	
	
	public static void sauverModele(String uri, EObject root) {
		   Resource resource = null;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      resource.getContents().add(root);
		      resource.save(null);
		   } catch (Exception e) {
		      System.err.println("ERREUR sauvegarde du modèle : "+e);
		      e.printStackTrace();
		   }
		}

		public static Model chargerModele(String uri) {
		   Resource resource = null;
		   EPackage pack=UMLPackage.eINSTANCE;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("uml", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      XMLResource.XMLMap xmlMap = new XMLMapImpl();
		      xmlMap.setNoNamespacePackage(pack);
		      java.util.Map options = new java.util.HashMap();
		      options.put(XMLResource.OPTION_XML_MAP, xmlMap);
		      resource.load(options);
		   }
		   catch(Exception e) {
		      System.err.println("ERREUR chargement du modèle : "+e);
		      e.printStackTrace();
		   }
		   return (Model) resource.getContents().get(0);
		}
		
		public static void moveClassToPackage(Class c, Package p){
			p.getPackagedElements().add(c);
		}
		
		public static Class findClassInPackage(String name, Package p){
			Class c=null;
			for(PackageableElement pd : p.getPackagedElements()){
				if(pd instanceof Class){
					Class pdc=(Class)pd;
					if(pdc.getName().contentEquals(name)){
						return pdc;
					}else if(pd instanceof Package){
						Package pdp=(Package) pd;
						c=findClassInPackage(name,pdp);
						if(c!=null){
							return c;	
						}
					}
					
				}	
			}
			return c;
		}
				
		public static Package findPackageInPackage(String name, Package p){
			Package c=null;
			for(PackageableElement pd : p.getPackagedElements()){
				if(pd instanceof Package){
					Package pdc=(Package)pd;
					if(pdc.getName().contentEquals(name)){
						return pdc;
					}else{
						Package pdp=(Package) pd;
						c=findPackageInPackage(name,pdp);
						if(c!=null){
							return c;	
						}
					}
					
				}	
			}
			return c;
		}
		
		public static void attributeChangeToPrivate(Property p){
			Class owningClass = (Class) p.getOwner();
			if(p.getVisibility().equals(VisibilityKind.PUBLIC_LITERAL)){
				p.setVisibility(VisibilityKind.PRIVATE_LITERAL);
			}
			if(owningClass!=null){
				Operation set=factory.createOperation();
				set.setName("set"+p.getName());
				Parameter param = factory.createParameter();
				set.setType(p.getType());
				param.setLower(p.getLower());
				param.setUpper(p.getUpper());
				param.setDirection(ParameterDirectionKind.IN_LITERAL);
				set.getOwnedParameters().add(param);
				
				Operation get=factory.createOperation();
				get.setName("get"+p.getName());
				get.setType(p.getType());
				Parameter param2 = factory.createParameter();
				param2.setLower(p.getLower());
				param2.setUpper(p.getUpper());
				param2.setDirection(ParameterDirectionKind.RETURN_LITERAL);
				get.getOwnedParameters().add(param2);
				
				owningClass.getOwnedOperations().add(set);
				owningClass.getOwnedOperations().add(get);				
			}
		}
		
		
		public static void upToSuper(Class Op, Class Super, Operation o){
			if(!Op.getOperations().contains(o) && Super.getOperations().contains(o) && !Op.allParents().contains(Super)){
				return;
			}
			else{
				Super.getOwnedOperations().add(o);
				Op.getOperations().remove(o);
			}
		}
		
		//machine à état
		
		public static ArrayList<StateMachine> getStateMachineFromClass(Class c){
			ArrayList<StateMachine> arState = new ArrayList<StateMachine>();
			EList<Behavior> bal = c.getOwnedBehaviors();
			if(bal!=null){
				for(Behavior b : c.getOwnedBehaviors()){
					if(b instanceof StateMachine){
						arState.add((StateMachine) b);
					}
				}
			}
			else{
				System.out.println("Classe sans machine à état.");
			}
			return arState;
		}
				 
		public static boolean stateMachineHasOnlyOneRegion(StateMachine stama){
			boolean res = false;
			if(stama.getRegions().size()==1){
				res=true;
			}
			return res;
		}
		
		public static ArrayList<State> getStatesFromStateMachine(StateMachine stama){
			
			ArrayList<State> arState= new ArrayList<State>();
			if(stateMachineHasOnlyOneRegion(stama)){
				Region r=stama.getRegions().get(0);
				for(Vertex ver: r.getSubvertices()){
					if(ver instanceof State){
						arState.add((State) ver);
					}
				}
			}
			return arState;
		}
		
		public static ArrayList<Operation> getTriggerOperationFromStateMachine(StateMachine stama){
			ArrayList<Operation> arOP = new ArrayList<Operation>();
			if(stateMachineHasOnlyOneRegion(stama)){
				Region r=stama.getRegions().get(0);
				for(Transition transition : r.getTransitions()){
					for(Trigger trigger: transition.getTriggers()){				
						Event e = trigger.getEvent();
						if(e instanceof CallEvent){
							arOP.add(((CallEvent) e).getOperation());		
						}
					}
				}
			}
			return arOP;
		}
		
}
